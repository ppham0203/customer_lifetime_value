{
  "queries": {
    "2q67vffj6b4": [
      {
        "mode": "SQL",
        "id": "kfVle0UB3DAS",
        "runOn": 1670939695980,
        "runIn": 2639,
        "runBy": "admin",
        "connection": "snowflake_demo",
        "state": "FAILED",
        "futureId": "3S927rW2",
        "hash": "ff9c4751d279e4b257cec55a40fd0857",
        "querySettings": {
          "addLimitToStatement": true,
          "statementsOutOfTransaction": false,
          "inheritConf": "default",
          "extraConf": [],
          "addDkuUdf": false,
          "statementsParseMode": "SPLIT",
          "statementsExecutionMode": "PREPARED"
        },
        "sql": "call train_helmus();\n",
        "expandedSql": "call train_helmus();\n"
      },
      {
        "mode": "SQL",
        "id": "xFhnUbchcFfH",
        "runOn": 1670939794746,
        "runIn": 5819,
        "runBy": "admin",
        "connection": "snowflake_demo",
        "state": "DONE",
        "futureId": "RoThKFO5",
        "hash": "ff9c4751d279e4b257cec55a40fd0857",
        "querySettings": {
          "addLimitToStatement": true,
          "statementsOutOfTransaction": false,
          "inheritConf": "default",
          "extraConf": [],
          "addDkuUdf": false,
          "statementsParseMode": "SPLIT",
          "statementsExecutionMode": "PREPARED"
        },
        "sql": "call train_helmus();\n",
        "expandedSql": "call train_helmus();\n"
      }
    ],
    "b86qbu4hh9j": [
      {
        "mode": "SQL",
        "id": "7wjHrdOALVFs",
        "runOn": 1670939742510,
        "runIn": 28400,
        "runBy": "admin",
        "connection": "snowflake_demo",
        "state": "DONE",
        "futureId": "PwmyRvpd",
        "hash": "6d9a74a30035d73b2dd3f699512adb18",
        "querySettings": {
          "addLimitToStatement": true,
          "statementsOutOfTransaction": false,
          "inheritConf": "default",
          "extraConf": [],
          "addDkuUdf": false,
          "statementsParseMode": "SPLIT",
          "statementsExecutionMode": "PREPARED"
        },
        "sql": "create or replace procedure train_helmus()\n  returns variant\n  language python\n  runtime_version \u003d 3.8\n  packages \u003d (\u0027snowflake-snowpark-python\u0027, \u0027scikit-learn\u0027, \u0027joblib\u0027)\n  handler \u003d \u0027main\u0027\nas $$\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score\n\n\nimport os\nfrom joblib import dump\n\ndef main(session):\n    # Load features\n    df \u003d session.table(\u0027SEDEMO.PUBLIC.CODER_HANDSON_SNOWFLAKE_TRAIN\u0027).to_pandas()\n\n    # Dataset Settings\n    #-----------------------------------------------------------------\n\n    # Select a subset of features to use for training\n    SCHEMA \u003d {    \n        \u0027target\u0027: \u0027high_value\u0027,    \n        \u0027features_num\u0027: [\u0027age\u0027, \u0027price_first_item_purchased\u0027, \u0027pages_visited\u0027],    \n        \u0027features_cat\u0027: [\u0027gender\u0027, \u0027campaign\u0027]    \n    }\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    #-----------------------------------------------------------------\n    # Preprocessing on Training Set\n    #-----------------------------------------------------------------\n\n    # Numerical variables\n    df_num \u003d df[SCHEMA[\u0027features_num\u0027]]\n\n    trf_num \u003d Pipeline([\n        (\u0027imp\u0027, SimpleImputer(strategy\u003d\u0027mean\u0027)),\n        (\u0027sts\u0027, StandardScaler()),\n    ])\n\n    # Categorical variables\n    df_cat \u003d df[SCHEMA[\u0027features_cat\u0027]]\n\n    trf_cat \u003d OneHotEncoder(handle_unknown\u003d\"ignore\")\n\n    preprocessor \u003d ColumnTransformer(\n        transformers\u003d[\n            (\"num\", trf_num, SCHEMA[\u0027features_num\u0027]),\n            (\"cat\", trf_cat, SCHEMA[\u0027features_cat\u0027])\n        ]\n    )\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    #-------------------------------------------------------------------------\n    # TRAINING\n    #-------------------------------------------------------------------------\n\n    clf \u003d Pipeline(\n        steps\u003d[(\"preprocessor\", preprocessor), (\"clf\", RandomForestClassifier())]\n    )\n\n    param_grid \u003d {\n        \"clf__max_depth\"        : [3, None],\n        \"clf__max_features\"     : [1],\n        \"clf__min_samples_split\": [2],\n        \"clf__min_samples_leaf\" : [1],\n        \"clf__bootstrap\"        : [False],\n        \"clf__criterion\"        : [\"entropy\"],\n        \"clf__n_estimators\"     : [10]\n    }\n\n    gs \u003d GridSearchCV(clf, param_grid\u003dparam_grid, n_jobs\u003d-1, scoring\u003d\u0027roc_auc\u0027, cv\u003d3)\n    X \u003d df[SCHEMA[\u0027features_num\u0027] + SCHEMA[\u0027features_cat\u0027]]\n    Y \u003d df[SCHEMA[\u0027target\u0027]].values\n    gs.fit(X, Y)\n    model \u003d gs.best_estimator_\n    train_r2_score \u003d model.score(X, Y)\n\n    model_saved \u003d False\n\n\n    # Return model R2 score on train and test data\n    return {\"R2 score on Train\": train_r2_score}\n$$;",
        "expandedSql": "create or replace procedure train_helmus()\n  returns variant\n  language python\n  runtime_version \u003d 3.8\n  packages \u003d (\u0027snowflake-snowpark-python\u0027, \u0027scikit-learn\u0027, \u0027joblib\u0027)\n  handler \u003d \u0027main\u0027\nas $$\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score\n\n\nimport os\nfrom joblib import dump\n\ndef main(session):\n    # Load features\n    df \u003d session.table(\u0027SEDEMO.PUBLIC.CODER_HANDSON_SNOWFLAKE_TRAIN\u0027).to_pandas()\n\n    # Dataset Settings\n    #-----------------------------------------------------------------\n\n    # Select a subset of features to use for training\n    SCHEMA \u003d {    \n        \u0027target\u0027: \u0027high_value\u0027,    \n        \u0027features_num\u0027: [\u0027age\u0027, \u0027price_first_item_purchased\u0027, \u0027pages_visited\u0027],    \n        \u0027features_cat\u0027: [\u0027gender\u0027, \u0027campaign\u0027]    \n    }\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    #-----------------------------------------------------------------\n    # Preprocessing on Training Set\n    #-----------------------------------------------------------------\n\n    # Numerical variables\n    df_num \u003d df[SCHEMA[\u0027features_num\u0027]]\n\n    trf_num \u003d Pipeline([\n        (\u0027imp\u0027, SimpleImputer(strategy\u003d\u0027mean\u0027)),\n        (\u0027sts\u0027, StandardScaler()),\n    ])\n\n    # Categorical variables\n    df_cat \u003d df[SCHEMA[\u0027features_cat\u0027]]\n\n    trf_cat \u003d OneHotEncoder(handle_unknown\u003d\"ignore\")\n\n    preprocessor \u003d ColumnTransformer(\n        transformers\u003d[\n            (\"num\", trf_num, SCHEMA[\u0027features_num\u0027]),\n            (\"cat\", trf_cat, SCHEMA[\u0027features_cat\u0027])\n        ]\n    )\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    #-------------------------------------------------------------------------\n    # TRAINING\n    #-------------------------------------------------------------------------\n\n    clf \u003d Pipeline(\n        steps\u003d[(\"preprocessor\", preprocessor), (\"clf\", RandomForestClassifier())]\n    )\n\n    param_grid \u003d {\n        \"clf__max_depth\"        : [3, None],\n        \"clf__max_features\"     : [1],\n        \"clf__min_samples_split\": [2],\n        \"clf__min_samples_leaf\" : [1],\n        \"clf__bootstrap\"        : [False],\n        \"clf__criterion\"        : [\"entropy\"],\n        \"clf__n_estimators\"     : [10]\n    }\n\n    gs \u003d GridSearchCV(clf, param_grid\u003dparam_grid, n_jobs\u003d-1, scoring\u003d\u0027roc_auc\u0027, cv\u003d3)\n    X \u003d df[SCHEMA[\u0027features_num\u0027] + SCHEMA[\u0027features_cat\u0027]]\n    Y \u003d df[SCHEMA[\u0027target\u0027]].values\n    gs.fit(X, Y)\n    model \u003d gs.best_estimator_\n    train_r2_score \u003d model.score(X, Y)\n\n    model_saved \u003d False\n\n\n    # Return model R2 score on train and test data\n    return {\"R2 score on Train\": train_r2_score}\n$$;"
      }
    ],
    "ixbgrlq32vk": [
      {
        "mode": "SQL",
        "id": "XjgvdWzkCWUk",
        "runOn": 1678118759415,
        "runIn": 944,
        "runBy": "admin",
        "connection": "snowflake_demo",
        "state": "FAILED",
        "futureId": "HNphKUCA",
        "hash": "6e37415295587406726b65780a3bcb1a",
        "querySettings": {
          "addLimitToStatement": true,
          "statementsOutOfTransaction": false,
          "inheritConf": "default",
          "extraConf": [],
          "addDkuUdf": false,
          "statementsParseMode": "SPLIT",
          "statementsExecutionMode": "PREPARED"
        },
        "sql": "SELECT \n    \"customer_id\" AS \"customer_id\",\n    \"pages_visited\" AS \"pages_visited\",\n    \"campaign\" AS \"campaign\",\n    \"ip\" AS \"ip\",\n    \"ip_geopoint\" AS \"ip_geopoint\",\n    \"Country\" AS \"Country\",\n    \"GDP_per_cap\" AS \"GDP_per_cap\",\n    \"age\" AS \"age\",\n    \"price_first_item_purchased\" AS \"price_first_item_purchased\",\n    \"gender\" AS \"gender\",\n    \"revenue\" AS \"revenue\",\n    \"Tier_Rev\" AS \"Tier_Rev\",\n    \"High Revenue\" AS \"High Revenue\"\n  FROM (\n    SELECT \n        \"customer_id\",\n        \"pages_visited\",\n        \"campaign\",\n        \"ip\",\n        \"ip_geopoint\",\n        \"Country\",\n        \"GDP_per_cap\",\n        \"birth\",\n        \"age\",\n        \"price_first_item_purchased\",\n        \"gender\",\n        \"revenue\",\n        \"High Revenue\",\n        numberBinner_customMode_5UeNvpjgrV9V98mASwT1lU1WE0oVbm0vESw2GkAWyGNBMEfSE71WusJnxnF4bmg5(\"Tier_Rev\", ARRAY_CONSTRUCT(\u00270.0\u0027, \u0027100.0\u0027, NULL, \u0027100.0\u0027, \u0027200.0\u0027, NULL, \u0027200.0\u0027, \u0027300.0\u0027, NULL, \u0027300.0\u0027, \u0027400.0\u0027, NULL, \u0027400.0\u0027, \u0027600.0\u0027, NULL)) AS \"Tier_Rev\"\n      FROM (\n        SELECT \n            \"customer_id\" AS \"customer_id\",\n            \"pages_visited\" AS \"pages_visited\",\n            \"campaign\" AS \"campaign\",\n            \"ip\" AS \"ip\",\n            \"ip_geopoint\" AS \"ip_geopoint\",\n            \"Country\" AS \"Country\",\n            \"GDP_per_cap\" AS \"GDP_per_cap\",\n            \"birth\" AS \"birth\",\n            \"age\" AS \"age\",\n            \"price_first_item_purchased\" AS \"price_first_item_purchased\",\n            \"gender\" AS \"gender\",\n            \"revenue\" AS \"revenue\",\n            \"High Revenue\" AS \"High Revenue\",\n            \"revenue\" AS \"Tier_Rev\"\n          FROM (\n            SELECT \n                \"customer_id\",\n                \"pages_visited\",\n                \"campaign\",\n                \"ip\",\n                \"Country\",\n                \"GDP_per_cap\",\n                \"birth\",\n                \"price_first_item_purchased\",\n                \"gender\",\n                \"revenue\",\n                \"age\",\n                GEOIP_RESULT[0] AS \"ip_geopoint\",\n                GEOIP_RESULT[1] AS \"ip_country\",\n                CASE WHEN \"revenue\" \u003e 177 THEN \u0027Yes\u0027 ELSE \u0027No\u0027 END AS \"High Revenue\"\n              FROM (\n                SELECT \n                    \"customer_id\",\n                    \"pages_visited\",\n                    \"campaign\",\n                    \"ip\",\n                    \"Country\",\n                    \"GDP_per_cap\",\n                    \"birth\",\n                    \"price_first_item_purchased\",\n                    \"gender\",\n                    \"revenue\",\n                    CAST(TRUNC((DATEDIFF(MONTH, CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\"), CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))) - (CASE WHEN (EXTRACT(DAY FROM (CONVERT_TIMEZONE(\u0027UTC\u0027, TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))))-EXTRACT(DAY FROM (CONVERT_TIMEZONE(\u0027UTC\u0027, \"birth\"))))*DATEDIFF(MONTH, CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\"), CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))) \u003c 0 OR (EXTRACT(DAY FROM (CONVERT_TIMEZONE(\u0027UTC\u0027, TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))))-EXTRACT(DAY FROM (CONVERT_TIMEZONE(\u0027UTC\u0027, \"birth\")))) \u003d 0 AND (DATEDIFF(SECOND, TO_TIME(CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\")), TO_TIME(CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027))))))*DATEDIFF(MONTH, CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\"), CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))) \u003c 0 THEN SIGN(DATEDIFF(MONTH, CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\"), CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027))))) ELSE 0 END))/12) AS BIGINT) AS \"age\",\n                    geoipResolve_hWErKoP3WHZWQUCikqU2NicNo0fF5sz7Vl5LqX6vEqZhl6FXlYuy6lcPz2zJaihw(\"ip\", \u0027{\"inCol\":\"ip\",\"outColPrefix\":\"ip_\",\"extract_country\":true,\"extract_countrycode\":false,\"extract_region\":false,\"extract_city\":false,\"extract_postalcode\":false,\"extract_latlng\":false,\"extract_timezone\":false,\"extract_continentcode\":false,\"extract_geopoint\":true,\"extract_countrycode3\":false}\u0027) AS \"GEOIP_RESULT\"\n                  FROM (\n                    SELECT \n                        \"customer_id\",\n                        \"pages_visited\",\n                        \"campaign\",\n                        \"ip\",\n                        \"Country\",\n                        \"GDP_per_cap\",\n                        CASE \n  WHEN REGEXP_LIKE(LOWER(CAST(\"birth\" AS VARCHAR)), \u0027((0?[1-9])|(1[012]))/((0?[1-9])|([12][0-9])|(3[01]))/[0-9]{4}\u0027) THEN TO_TIMESTAMP_TZ(TO_TIMESTAMP_NTZ(CAST(\"birth\" AS VARCHAR),\u0027MM/DD/YYYY\u0027) || \u0027 +00:00\u0027)\n  ELSE NULL\nEND AS \"birth\",\n                        \"price_first_item_purchased\",\n                        \"gender\",\n                        \"revenue\"\n                      FROM \"MODERNONLINECUSTOMERLIFETIMEVALUE_LAST_YEAR_JOIN\" \"__input_table\"\n                    ) \"__dku_before_xxx\"\n                ) \"__dku_before_xxx\"\n              WHERE (NOT (isValidMeaning_yA9iY6BquhAPaekVtZeyrH0AYJXA0udqpTnN4DOZurDQXjsKMOXGTCbYqDkGKDp5(\"revenue\", \u0027LongMeaning\u0027)) OR ((isValidMeaning_yA9iY6BquhAPaekVtZeyrH0AYJXA0udqpTnN4DOZurDQXjsKMOXGTCbYqDkGKDp5(\"revenue\", \u0027LongMeaning\u0027)) IS NULL))\n                AND (\"age\" \u003e\u003d 0.0 AND \"age\" \u003c\u003d 100.0)\n                AND (NOT (isValidMeaning_TZEDnc5ip3cn7Jo48ZGlmL1g7ieYBONkGb5FDaHTu16ZaeM0lRs0IO9ivi2Aeztt(\"Country\", \u0027CountryMeaning\u0027)) OR ((isValidMeaning_TZEDnc5ip3cn7Jo48ZGlmL1g7ieYBONkGb5FDaHTu16ZaeM0lRs0IO9ivi2Aeztt(\"Country\", \u0027CountryMeaning\u0027)) IS NULL))\n                AND (NOT (\"Country\" IS NULL OR (\"Country\" \u003d \u0027\u0027)) OR ((\"Country\" IS NULL OR (\"Country\" \u003d \u0027\u0027)) IS NULL))\n                AND (NOT \"GDP_per_cap\" IS NULL OR ((\"GDP_per_cap\" IS NULL) IS NULL))\n            ) \"__dku_before_xxx\"\n        ) \"__dku_before_xxx\"\n    ) \"__dku_before_xxx\"",
        "expandedSql": "SELECT \n    \"customer_id\" AS \"customer_id\",\n    \"pages_visited\" AS \"pages_visited\",\n    \"campaign\" AS \"campaign\",\n    \"ip\" AS \"ip\",\n    \"ip_geopoint\" AS \"ip_geopoint\",\n    \"Country\" AS \"Country\",\n    \"GDP_per_cap\" AS \"GDP_per_cap\",\n    \"age\" AS \"age\",\n    \"price_first_item_purchased\" AS \"price_first_item_purchased\",\n    \"gender\" AS \"gender\",\n    \"revenue\" AS \"revenue\",\n    \"Tier_Rev\" AS \"Tier_Rev\",\n    \"High Revenue\" AS \"High Revenue\"\n  FROM (\n    SELECT \n        \"customer_id\",\n        \"pages_visited\",\n        \"campaign\",\n        \"ip\",\n        \"ip_geopoint\",\n        \"Country\",\n        \"GDP_per_cap\",\n        \"birth\",\n        \"age\",\n        \"price_first_item_purchased\",\n        \"gender\",\n        \"revenue\",\n        \"High Revenue\",\n        numberBinner_customMode_5UeNvpjgrV9V98mASwT1lU1WE0oVbm0vESw2GkAWyGNBMEfSE71WusJnxnF4bmg5(\"Tier_Rev\", ARRAY_CONSTRUCT(\u00270.0\u0027, \u0027100.0\u0027, NULL, \u0027100.0\u0027, \u0027200.0\u0027, NULL, \u0027200.0\u0027, \u0027300.0\u0027, NULL, \u0027300.0\u0027, \u0027400.0\u0027, NULL, \u0027400.0\u0027, \u0027600.0\u0027, NULL)) AS \"Tier_Rev\"\n      FROM (\n        SELECT \n            \"customer_id\" AS \"customer_id\",\n            \"pages_visited\" AS \"pages_visited\",\n            \"campaign\" AS \"campaign\",\n            \"ip\" AS \"ip\",\n            \"ip_geopoint\" AS \"ip_geopoint\",\n            \"Country\" AS \"Country\",\n            \"GDP_per_cap\" AS \"GDP_per_cap\",\n            \"birth\" AS \"birth\",\n            \"age\" AS \"age\",\n            \"price_first_item_purchased\" AS \"price_first_item_purchased\",\n            \"gender\" AS \"gender\",\n            \"revenue\" AS \"revenue\",\n            \"High Revenue\" AS \"High Revenue\",\n            \"revenue\" AS \"Tier_Rev\"\n          FROM (\n            SELECT \n                \"customer_id\",\n                \"pages_visited\",\n                \"campaign\",\n                \"ip\",\n                \"Country\",\n                \"GDP_per_cap\",\n                \"birth\",\n                \"price_first_item_purchased\",\n                \"gender\",\n                \"revenue\",\n                \"age\",\n                GEOIP_RESULT[0] AS \"ip_geopoint\",\n                GEOIP_RESULT[1] AS \"ip_country\",\n                CASE WHEN \"revenue\" \u003e 177 THEN \u0027Yes\u0027 ELSE \u0027No\u0027 END AS \"High Revenue\"\n              FROM (\n                SELECT \n                    \"customer_id\",\n                    \"pages_visited\",\n                    \"campaign\",\n                    \"ip\",\n                    \"Country\",\n                    \"GDP_per_cap\",\n                    \"birth\",\n                    \"price_first_item_purchased\",\n                    \"gender\",\n                    \"revenue\",\n                    CAST(TRUNC((DATEDIFF(MONTH, CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\"), CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))) - (CASE WHEN (EXTRACT(DAY FROM (CONVERT_TIMEZONE(\u0027UTC\u0027, TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))))-EXTRACT(DAY FROM (CONVERT_TIMEZONE(\u0027UTC\u0027, \"birth\"))))*DATEDIFF(MONTH, CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\"), CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))) \u003c 0 OR (EXTRACT(DAY FROM (CONVERT_TIMEZONE(\u0027UTC\u0027, TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))))-EXTRACT(DAY FROM (CONVERT_TIMEZONE(\u0027UTC\u0027, \"birth\")))) \u003d 0 AND (DATEDIFF(SECOND, TO_TIME(CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\")), TO_TIME(CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027))))))*DATEDIFF(MONTH, CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\"), CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027)))) \u003c 0 THEN SIGN(DATEDIFF(MONTH, CONVERT_TIMEZONE(\u0027UTC\u0027,\"birth\"), CONVERT_TIMEZONE(\u0027UTC\u0027,TO_TIMESTAMP_TZ(CONCAT(\u00272023-03-06 16:00:09\u0027, \u0027+00\u0027))))) ELSE 0 END))/12) AS BIGINT) AS \"age\",\n                    geoipResolve_hWErKoP3WHZWQUCikqU2NicNo0fF5sz7Vl5LqX6vEqZhl6FXlYuy6lcPz2zJaihw(\"ip\", \u0027{\"inCol\":\"ip\",\"outColPrefix\":\"ip_\",\"extract_country\":true,\"extract_countrycode\":false,\"extract_region\":false,\"extract_city\":false,\"extract_postalcode\":false,\"extract_latlng\":false,\"extract_timezone\":false,\"extract_continentcode\":false,\"extract_geopoint\":true,\"extract_countrycode3\":false}\u0027) AS \"GEOIP_RESULT\"\n                  FROM (\n                    SELECT \n                        \"customer_id\",\n                        \"pages_visited\",\n                        \"campaign\",\n                        \"ip\",\n                        \"Country\",\n                        \"GDP_per_cap\",\n                        CASE \n  WHEN REGEXP_LIKE(LOWER(CAST(\"birth\" AS VARCHAR)), \u0027((0?[1-9])|(1[012]))/((0?[1-9])|([12][0-9])|(3[01]))/[0-9]{4}\u0027) THEN TO_TIMESTAMP_TZ(TO_TIMESTAMP_NTZ(CAST(\"birth\" AS VARCHAR),\u0027MM/DD/YYYY\u0027) || \u0027 +00:00\u0027)\n  ELSE NULL\nEND AS \"birth\",\n                        \"price_first_item_purchased\",\n                        \"gender\",\n                        \"revenue\"\n                      FROM \"MODERNONLINECUSTOMERLIFETIMEVALUE_LAST_YEAR_JOIN\" \"__input_table\"\n                    ) \"__dku_before_xxx\"\n                ) \"__dku_before_xxx\"\n              WHERE (NOT (isValidMeaning_yA9iY6BquhAPaekVtZeyrH0AYJXA0udqpTnN4DOZurDQXjsKMOXGTCbYqDkGKDp5(\"revenue\", \u0027LongMeaning\u0027)) OR ((isValidMeaning_yA9iY6BquhAPaekVtZeyrH0AYJXA0udqpTnN4DOZurDQXjsKMOXGTCbYqDkGKDp5(\"revenue\", \u0027LongMeaning\u0027)) IS NULL))\n                AND (\"age\" \u003e\u003d 0.0 AND \"age\" \u003c\u003d 100.0)\n                AND (NOT (isValidMeaning_TZEDnc5ip3cn7Jo48ZGlmL1g7ieYBONkGb5FDaHTu16ZaeM0lRs0IO9ivi2Aeztt(\"Country\", \u0027CountryMeaning\u0027)) OR ((isValidMeaning_TZEDnc5ip3cn7Jo48ZGlmL1g7ieYBONkGb5FDaHTu16ZaeM0lRs0IO9ivi2Aeztt(\"Country\", \u0027CountryMeaning\u0027)) IS NULL))\n                AND (NOT (\"Country\" IS NULL OR (\"Country\" \u003d \u0027\u0027)) OR ((\"Country\" IS NULL OR (\"Country\" \u003d \u0027\u0027)) IS NULL))\n                AND (NOT \"GDP_per_cap\" IS NULL OR ((\"GDP_per_cap\" IS NULL) IS NULL))\n            ) \"__dku_before_xxx\"\n        ) \"__dku_before_xxx\"\n    ) \"__dku_before_xxx\""
      }
    ]
  }
}